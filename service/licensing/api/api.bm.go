// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathLicensingPing = "/eagle.licensing.v1.Licensing/Ping"
var PathLicensingGetLicensesByOrg = "/v1/licenses"
var PathLicensingGetLicense = "/v1/license"
var PathLicensingAddLicense = "/v1/license"
var PathLicensingUpdateLicense = "/v1/license"
var PathLicensingDeleteLicense = "/v1/license"

// LicensingBMServer is the server API for Licensing service.
type LicensingBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	GetLicensesByOrg(ctx context.Context, req *GetLicensesByOrgReq) (resp *Licenses, err error)

	GetLicense(ctx context.Context, req *GetLicenseReq) (resp *License, err error)

	AddLicense(ctx context.Context, req *License) (resp *google_protobuf1.Empty, err error)

	UpdateLicense(ctx context.Context, req *License) (resp *google_protobuf1.Empty, err error)

	DeleteLicense(ctx context.Context, req *GetLicenseReq) (resp *google_protobuf1.Empty, err error)
}

var LicensingSvc LicensingBMServer

func licensingPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicensingSvc.Ping(c, p)
	c.JSON(resp, err)
}

func licensingGetLicensesByOrg(c *bm.Context) {
	p := new(GetLicensesByOrgReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicensingSvc.GetLicensesByOrg(c, p)
	c.JSON(resp, err)
}

func licensingGetLicense(c *bm.Context) {
	p := new(GetLicenseReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicensingSvc.GetLicense(c, p)
	c.JSON(resp, err)
}

func licensingAddLicense(c *bm.Context) {
	p := new(License)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicensingSvc.AddLicense(c, p)
	c.JSON(resp, err)
}

func licensingUpdateLicense(c *bm.Context) {
	p := new(License)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicensingSvc.UpdateLicense(c, p)
	c.JSON(resp, err)
}

func licensingDeleteLicense(c *bm.Context) {
	p := new(GetLicenseReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicensingSvc.DeleteLicense(c, p)
	c.JSON(resp, err)
}

// RegisterLicensingBMServer Register the blademaster route
func RegisterLicensingBMServer(e *bm.Engine, server LicensingBMServer) {
	LicensingSvc = server
	e.GET("/eagle.licensing.v1.Licensing/Ping", licensingPing)
	e.GET("/v1/licenses", licensingGetLicensesByOrg)
	e.GET("/v1/license", licensingGetLicense)
	e.POST("/v1/license", licensingAddLicense)
	e.PUT("/v1/license", licensingUpdateLicense)
	e.DELETE("/v1/license", licensingDeleteLicense)
}
