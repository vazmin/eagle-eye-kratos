// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	api "github.com/vazmin/eagle-eye-kratos/service/organization/api"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type License struct {
	LicenseId            string            `protobuf:"bytes,1,opt,name=licenseId,proto3" json:"licenseId,omitempty" ddb:"license_id"`
	OrganizationId       string            `protobuf:"bytes,2,opt,name=organizationId,proto3" json:"organizationId,omitempty" ddb:"organization_id"`
	LicenseType          string            `protobuf:"bytes,3,opt,name=licenseType,proto3" json:"licenseType,omitempty" ddb:"license_type"`
	ProduceName          string            `protobuf:"bytes,4,opt,name=produceName,proto3" json:"produceName,omitempty" ddb:"product_name"`
	LicenseMax           int32             `protobuf:"varint,5,opt,name=licenseMax,proto3" json:"licenseMax,omitempty" ddb:"license_max"`
	LicenseAllocated     int32             `protobuf:"varint,6,opt,name=licenseAllocated,proto3" json:"licenseAllocated,omitempty" ddb:"license_allocated"`
	Comment              string            `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty" ddb:"comment"`
	Organization         *api.Organization `protobuf:"bytes,8,opt,name=organization,proto3" json:"organization,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *License) Reset()         { *m = License{} }
func (m *License) String() string { return proto.CompactTextString(m) }
func (*License) ProtoMessage()    {}
func (*License) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *License) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *License) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_License.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *License) XXX_Merge(src proto.Message) {
	xxx_messageInfo_License.Merge(m, src)
}
func (m *License) XXX_Size() int {
	return m.Size()
}
func (m *License) XXX_DiscardUnknown() {
	xxx_messageInfo_License.DiscardUnknown(m)
}

var xxx_messageInfo_License proto.InternalMessageInfo

type Licenses struct {
	List                 []*License `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Licenses) Reset()         { *m = Licenses{} }
func (m *Licenses) String() string { return proto.CompactTextString(m) }
func (*Licenses) ProtoMessage()    {}
func (*Licenses) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *Licenses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Licenses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Licenses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Licenses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Licenses.Merge(m, src)
}
func (m *Licenses) XXX_Size() int {
	return m.Size()
}
func (m *Licenses) XXX_DiscardUnknown() {
	xxx_messageInfo_Licenses.DiscardUnknown(m)
}

var xxx_messageInfo_Licenses proto.InternalMessageInfo

type GetLicensesByOrgReq struct {
	OrganizationId       string   `protobuf:"bytes,1,opt,name=organizationId,proto3" json:"organizationId,omitempty" form:"organizationId" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLicensesByOrgReq) Reset()         { *m = GetLicensesByOrgReq{} }
func (m *GetLicensesByOrgReq) String() string { return proto.CompactTextString(m) }
func (*GetLicensesByOrgReq) ProtoMessage()    {}
func (*GetLicensesByOrgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *GetLicensesByOrgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLicensesByOrgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLicensesByOrgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLicensesByOrgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLicensesByOrgReq.Merge(m, src)
}
func (m *GetLicensesByOrgReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLicensesByOrgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLicensesByOrgReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLicensesByOrgReq proto.InternalMessageInfo

type GetLicenseReq struct {
	OrganizationId       string   `protobuf:"bytes,1,opt,name=organizationId,proto3" json:"organizationId,omitempty" form:"organizationId" validate:"required"`
	LicenseId            string   `protobuf:"bytes,2,opt,name=licenseId,proto3" json:"licenseId,omitempty" form:"licenseId" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLicenseReq) Reset()         { *m = GetLicenseReq{} }
func (m *GetLicenseReq) String() string { return proto.CompactTextString(m) }
func (*GetLicenseReq) ProtoMessage()    {}
func (*GetLicenseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *GetLicenseReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLicenseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLicenseReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLicenseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLicenseReq.Merge(m, src)
}
func (m *GetLicenseReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLicenseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLicenseReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLicenseReq proto.InternalMessageInfo

func init() {
	proto.RegisterType((*License)(nil), "eagle.licensing.v1.License")
	proto.RegisterType((*Licenses)(nil), "eagle.licensing.v1.Licenses")
	proto.RegisterType((*GetLicensesByOrgReq)(nil), "eagle.licensing.v1.GetLicensesByOrgReq")
	proto.RegisterType((*GetLicenseReq)(nil), "eagle.licensing.v1.GetLicenseReq")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcb, 0x6e, 0xd3, 0x4c,
	0x1c, 0xc5, 0xeb, 0x26, 0xbd, 0x64, 0xd2, 0x54, 0xed, 0xf4, 0xf2, 0xb9, 0x69, 0x15, 0xe7, 0x1b,
	0x90, 0x08, 0xa0, 0xd8, 0x6a, 0x10, 0x08, 0x95, 0x55, 0x23, 0x4a, 0x55, 0xa9, 0x50, 0x64, 0x51,
	0x24, 0xd8, 0x54, 0x93, 0x78, 0x6a, 0x46, 0xd8, 0x1e, 0xd7, 0x9e, 0x44, 0x4d, 0x97, 0xbc, 0x02,
	0x1b, 0x5e, 0x80, 0x2d, 0xcf, 0xd1, 0x25, 0x12, 0x7b, 0x0b, 0x0a, 0x2b, 0x96, 0x7e, 0x02, 0x94,
	0xb1, 0x4d, 0xec, 0x24, 0xcd, 0xaa, 0xac, 0x92, 0xf1, 0xff, 0xfc, 0xce, 0xb1, 0x67, 0xce, 0x80,
	0x02, 0x76, 0xa9, 0xea, 0x7a, 0x8c, 0x33, 0x08, 0x09, 0x36, 0x2d, 0xa2, 0x5a, 0xb4, 0x4d, 0x1c,
	0x9f, 0x3a, 0xa6, 0xda, 0xdd, 0x2e, 0xd7, 0x4d, 0xca, 0xdf, 0x75, 0x5a, 0x6a, 0x9b, 0xd9, 0x9a,
	0xc9, 0x4c, 0xa6, 0x09, 0x69, 0xab, 0x73, 0x2a, 0x56, 0x62, 0x21, 0xfe, 0x45, 0x16, 0xe5, 0x4d,
	0x93, 0x31, 0xd3, 0x22, 0x03, 0x15, 0xb1, 0x5d, 0xde, 0x8b, 0x87, 0x5b, 0xf1, 0x10, 0xbb, 0x54,
	0xc3, 0x8e, 0xc3, 0x38, 0xe6, 0x94, 0x39, 0x7e, 0x3c, 0xdd, 0x4b, 0x25, 0x75, 0xf1, 0x85, 0x4d,
	0x1d, 0x4d, 0xbc, 0x4f, 0x9d, 0xf4, 0x48, 0xfd, 0xbd, 0x87, 0x39, 0xf3, 0x35, 0x9f, 0x78, 0x5d,
	0xda, 0x26, 0x1a, 0xf3, 0x4c, 0xec, 0xd0, 0x0b, 0xc1, 0x47, 0x76, 0xc9, 0x47, 0xa0, 0xdf, 0x39,
	0x30, 0x77, 0x28, 0xbe, 0x80, 0xc0, 0x06, 0x28, 0x44, 0x1f, 0x43, 0x0e, 0x0c, 0x59, 0xaa, 0x4a,
	0xb5, 0x42, 0x73, 0x35, 0x0c, 0x94, 0x25, 0xc3, 0x68, 0xed, 0xa0, 0x78, 0x72, 0x42, 0x0d, 0xa4,
	0x0f, 0x64, 0x70, 0x17, 0x2c, 0xa6, 0xdd, 0x0f, 0x0c, 0x79, 0x5a, 0x80, 0x1b, 0x61, 0xa0, 0xac,
	0x09, 0x30, 0x3d, 0x16, 0xf4, 0x10, 0x00, 0x1f, 0x83, 0x62, 0xec, 0xf7, 0xaa, 0xe7, 0x12, 0x39,
	0x27, 0xf8, 0xf5, 0x30, 0x50, 0x60, 0x26, 0x98, 0xf7, 0x5c, 0x82, 0xf4, 0xb4, 0xb4, 0x4f, 0xba,
	0x1e, 0x33, 0x3a, 0x6d, 0xf2, 0x02, 0xdb, 0x44, 0xce, 0x0f, 0x91, 0xd1, 0x8c, 0x9f, 0x38, 0xd8,
	0xee, 0x93, 0x29, 0x29, 0x7c, 0x08, 0x40, 0x6c, 0xf4, 0x1c, 0x9f, 0xcb, 0x33, 0x55, 0xa9, 0x36,
	0xd3, 0x5c, 0x0b, 0x03, 0x65, 0x39, 0x13, 0x69, 0xe3, 0x73, 0xa4, 0xa7, 0x84, 0x70, 0x1f, 0x2c,
	0xc5, 0xab, 0x5d, 0xcb, 0x62, 0x6d, 0xcc, 0x89, 0x21, 0xcf, 0x0a, 0x78, 0x33, 0x0c, 0x94, 0xff,
	0x32, 0x30, 0x4e, 0x14, 0x48, 0x1f, 0x81, 0xe0, 0x7d, 0x30, 0xd7, 0x66, 0xb6, 0x4d, 0x1c, 0x2e,
	0xcf, 0x89, 0xb7, 0x5e, 0x0e, 0x03, 0xa5, 0x24, 0xf8, 0xf8, 0x39, 0xd2, 0x13, 0x05, 0xdc, 0x07,
	0x0b, 0xe9, 0x2d, 0x93, 0xe7, 0xab, 0x52, 0xad, 0xd8, 0xb8, 0xa5, 0x46, 0xfd, 0x4b, 0x8f, 0xd4,
	0xee, 0xb6, 0x7a, 0x94, 0x5a, 0xeb, 0x19, 0x10, 0x3d, 0x01, 0xf3, 0xf1, 0x59, 0xfb, 0x50, 0x03,
	0x79, 0x8b, 0xfa, 0x5c, 0x96, 0xaa, 0xb9, 0x5a, 0xb1, 0xb1, 0xa9, 0x8e, 0x96, 0x59, 0x8d, 0xb5,
	0xba, 0x10, 0x22, 0x0b, 0xac, 0xec, 0x13, 0x9e, 0xf0, 0xcd, 0xde, 0x91, 0x67, 0xea, 0xe4, 0x0c,
	0x1e, 0x8f, 0x14, 0x20, 0x6a, 0x4e, 0x3d, 0x0c, 0x94, 0xbb, 0xa7, 0xcc, 0xb3, 0xb3, 0x0d, 0x38,
	0x30, 0x50, 0xb5, 0x8b, 0x2d, 0x6a, 0x60, 0x4e, 0x76, 0x90, 0x47, 0xce, 0x3a, 0xd4, 0x23, 0xa3,
	0xa5, 0x40, 0x5f, 0x24, 0x50, 0x1a, 0xc4, 0xfd, 0xbb, 0x20, 0xf8, 0x2c, 0x5d, 0xfa, 0xa8, 0xbb,
	0xb5, 0x30, 0x50, 0x6e, 0x47, 0x8e, 0x7f, 0x47, 0xe3, 0xcd, 0x06, 0x68, 0xe3, 0x73, 0x1e, 0x14,
	0x0e, 0x93, 0xdd, 0x83, 0x8f, 0x40, 0xfe, 0x65, 0xff, 0x77, 0x5d, 0x8d, 0x2e, 0xb1, 0x9a, 0xdc,
	0x70, 0x75, 0xaf, 0x7f, 0xc3, 0xcb, 0xd7, 0x3c, 0x87, 0x0c, 0x2c, 0x0d, 0x6f, 0x32, 0xbc, 0x33,
	0xee, 0x6c, 0xc6, 0x1c, 0x45, 0x79, 0x6b, 0xc2, 0x21, 0xfa, 0x68, 0xf5, 0xc3, 0xb7, 0x5f, 0x1f,
	0xa7, 0x17, 0xe1, 0x82, 0xd6, 0xdd, 0xd6, 0xac, 0xa4, 0x06, 0x18, 0x80, 0x81, 0x15, 0xfc, 0x7f,
	0x72, 0x54, 0x3f, 0x64, 0x52, 0x53, 0xd0, 0x8a, 0xc8, 0x28, 0xc1, 0x62, 0x2a, 0x03, 0xbe, 0x06,
	0x60, 0xd7, 0x30, 0x92, 0x88, 0x49, 0xfc, 0x75, 0xdb, 0x92, 0xf8, 0xa2, 0x8c, 0xef, 0x1b, 0x50,
	0x3a, 0x76, 0xfb, 0x27, 0x72, 0x13, 0xd6, 0xe5, 0x61, 0xeb, 0xa7, 0xc4, 0x22, 0x37, 0x63, 0x7d,
	0x2f, 0x6d, 0xdd, 0xdc, 0xb8, 0xfc, 0x51, 0x99, 0xba, 0xbc, 0xaa, 0x48, 0x5f, 0xaf, 0x2a, 0xd2,
	0xf7, 0xab, 0x8a, 0xf4, 0xe9, 0x67, 0x65, 0xea, 0x6d, 0x0e, 0xbb, 0xb4, 0x35, 0x2b, 0xf8, 0x07,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x06, 0x95, 0x99, 0x4f, 0x64, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LicensingClient is the client API for Licensing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LicensingClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLicensesByOrg(ctx context.Context, in *GetLicensesByOrgReq, opts ...grpc.CallOption) (*Licenses, error)
	GetLicense(ctx context.Context, in *GetLicenseReq, opts ...grpc.CallOption) (*License, error)
	AddLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*empty.Empty, error)
}

type licensingClient struct {
	cc *grpc.ClientConn
}

func NewLicensingClient(cc *grpc.ClientConn) LicensingClient {
	return &licensingClient{cc}
}

func (c *licensingClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/eagle.licensing.v1.Licensing/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licensingClient) GetLicensesByOrg(ctx context.Context, in *GetLicensesByOrgReq, opts ...grpc.CallOption) (*Licenses, error) {
	out := new(Licenses)
	err := c.cc.Invoke(ctx, "/eagle.licensing.v1.Licensing/GetLicensesByOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licensingClient) GetLicense(ctx context.Context, in *GetLicenseReq, opts ...grpc.CallOption) (*License, error) {
	out := new(License)
	err := c.cc.Invoke(ctx, "/eagle.licensing.v1.Licensing/GetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licensingClient) AddLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/eagle.licensing.v1.Licensing/AddLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licensingClient) UpdateLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/eagle.licensing.v1.Licensing/UpdateLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licensingClient) DeleteLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/eagle.licensing.v1.Licensing/DeleteLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicensingServer is the server API for Licensing service.
type LicensingServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	GetLicensesByOrg(context.Context, *GetLicensesByOrgReq) (*Licenses, error)
	GetLicense(context.Context, *GetLicenseReq) (*License, error)
	AddLicense(context.Context, *License) (*empty.Empty, error)
	UpdateLicense(context.Context, *License) (*empty.Empty, error)
	DeleteLicense(context.Context, *License) (*empty.Empty, error)
}

// UnimplementedLicensingServer can be embedded to have forward compatible implementations.
type UnimplementedLicensingServer struct {
}

func (*UnimplementedLicensingServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedLicensingServer) GetLicensesByOrg(ctx context.Context, req *GetLicensesByOrgReq) (*Licenses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicensesByOrg not implemented")
}
func (*UnimplementedLicensingServer) GetLicense(ctx context.Context, req *GetLicenseReq) (*License, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (*UnimplementedLicensingServer) AddLicense(ctx context.Context, req *License) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLicense not implemented")
}
func (*UnimplementedLicensingServer) UpdateLicense(ctx context.Context, req *License) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLicense not implemented")
}
func (*UnimplementedLicensingServer) DeleteLicense(ctx context.Context, req *License) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLicense not implemented")
}

func RegisterLicensingServer(s *grpc.Server, srv LicensingServer) {
	s.RegisterService(&_Licensing_serviceDesc, srv)
}

func _Licensing_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicensingServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eagle.licensing.v1.Licensing/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicensingServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Licensing_GetLicensesByOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicensesByOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicensingServer).GetLicensesByOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eagle.licensing.v1.Licensing/GetLicensesByOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicensingServer).GetLicensesByOrg(ctx, req.(*GetLicensesByOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Licensing_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicensingServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eagle.licensing.v1.Licensing/GetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicensingServer).GetLicense(ctx, req.(*GetLicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Licensing_AddLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(License)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicensingServer).AddLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eagle.licensing.v1.Licensing/AddLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicensingServer).AddLicense(ctx, req.(*License))
	}
	return interceptor(ctx, in, info, handler)
}

func _Licensing_UpdateLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(License)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicensingServer).UpdateLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eagle.licensing.v1.Licensing/UpdateLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicensingServer).UpdateLicense(ctx, req.(*License))
	}
	return interceptor(ctx, in, info, handler)
}

func _Licensing_DeleteLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(License)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicensingServer).DeleteLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eagle.licensing.v1.Licensing/DeleteLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicensingServer).DeleteLicense(ctx, req.(*License))
	}
	return interceptor(ctx, in, info, handler)
}

var _Licensing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eagle.licensing.v1.Licensing",
	HandlerType: (*LicensingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Licensing_Ping_Handler,
		},
		{
			MethodName: "GetLicensesByOrg",
			Handler:    _Licensing_GetLicensesByOrg_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _Licensing_GetLicense_Handler,
		},
		{
			MethodName: "AddLicense",
			Handler:    _Licensing_AddLicense_Handler,
		},
		{
			MethodName: "UpdateLicense",
			Handler:    _Licensing_UpdateLicense_Handler,
		},
		{
			MethodName: "DeleteLicense",
			Handler:    _Licensing_DeleteLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *License) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *License) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *License) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LicenseAllocated != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LicenseAllocated))
		i--
		dAtA[i] = 0x30
	}
	if m.LicenseMax != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LicenseMax))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ProduceName) > 0 {
		i -= len(m.ProduceName)
		copy(dAtA[i:], m.ProduceName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProduceName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LicenseType) > 0 {
		i -= len(m.LicenseType)
		copy(dAtA[i:], m.LicenseType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LicenseType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LicenseId) > 0 {
		i -= len(m.LicenseId)
		copy(dAtA[i:], m.LicenseId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LicenseId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Licenses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Licenses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Licenses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetLicensesByOrgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLicensesByOrgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLicensesByOrgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLicenseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLicenseReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLicenseReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LicenseId) > 0 {
		i -= len(m.LicenseId)
		copy(dAtA[i:], m.LicenseId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LicenseId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *License) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LicenseId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LicenseType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ProduceName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LicenseMax != 0 {
		n += 1 + sovApi(uint64(m.LicenseMax))
	}
	if m.LicenseAllocated != 0 {
		n += 1 + sovApi(uint64(m.LicenseAllocated))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Licenses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLicensesByOrgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLicenseReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LicenseId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *License) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: License: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: License: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenseType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProduceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProduceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseMax", wireType)
			}
			m.LicenseMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LicenseMax |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseAllocated", wireType)
			}
			m.LicenseAllocated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LicenseAllocated |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &api.Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Licenses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Licenses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Licenses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &License{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLicensesByOrgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLicensesByOrgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLicensesByOrgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLicenseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLicenseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLicenseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
